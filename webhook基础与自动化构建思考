# webhook

## 简介

- 一定场景时自动触发调用一个接口，后续执行与触发条件解耦
- webhook 就是指这个调用的接口的规范，以便他可以快速部署、接入到不同平台
- 不能应用于传统的客户端-服务器模型，而是发送端-接收端模型

## 安全问题

- 监听接口是暴露的，需要通过 token 认证等方式来进行校验

## 应用条件

1. 接收端需要异步运行，且不会很快结束
2. 发送端对于异步运行的结果不关注
   1. 比如 A 事件触发 B 执行，B 结束后触发 C 执行。A 只要知道 B 开始执行就行了
   2. 如果我触发了 A 事件，并且关注 B 有没有执行完，可以通过 C 是否执行来了解（比如推给你一条消息）
3. 跨终端，跨系统交互

## 常见场景

- 企业微信群里的 群聊机器人，有 webhook 接收能力
- gitlab、jenkins（需插件）、easyOps 有双向 webhook 能力
- 自动审查、构建、测试、发布
- 支付场景：付款码被扫描后，不安全场景时会调起付款者二次确认，确认后才扣款并通知收款方。这个等待过程不占用服务器资源，且符合上述应用条件，很可能是 webhook 原理的应用

## gitlab 的 webhook

- gitlab 自带有双向 webhook
  - 在触发 git 相关事件的时候，调用设定好的一个接口，并按照 webhook 规范传输数据（展示下使用）
  - 在收到设定好的接口请求时，按照 webhook 的规范去解析请求，如果通过校验，就触发某项指令或流水线的启动

# 自动化构建及发布

## 当前流程

- 看图：
- 问题：
  - 需要统一维护构建服务
  - 当没有显性的区别时，难以看出当前线上对应哪个版本
  - 需要操作 git、jenkins、easyOps 才能完成发布，至少 3 分钟
- 表端应用构建和我们比较类似，咨询后加以比较
  - 构建速度：
    - 应用：2min-60min
    - h5：20-60s
  - 构建任务：
    - 应用：每个人建几个 jenkins 任务自己维护，更灵活，但更乱，占更多资源
    - h5：一共几个任务，统一维护
  - 个性化配置
    - 应用：有合并分支等一些复杂配置操作
    - h5：一般不需要配置
  - 打包文件
    - 应用：10M 左右，强调版本控制
    - h5：5M 左右，历史文件不保存

## 调整流程

- 本地构建
  - 项目构建时间短，等待可以接受
  - 构建重运算，轻 IO，构建期间可以做其他事
  - 无定时启动等特殊需求
  - 无需维护构建服务器、jenkins 任务
  - 不会出现本地构架结果和 jenkins 构建结果不同
- 项目改变
  - 需要在 package.json 中添加一条指令，例如 npm run publish
  - 需要在.gitignore 中删除对./dist 的限制
    - 如果允许 -f 指令，则无需处理.gitignore
  - 执行新的指令会触发发布，普通 push 不会触发
  - 执行新的指令会在 git 中上传 dist 目录，并添加一条记录及统一的一个 tag
- 缺点：
  - 必须由开发人员触发自动化流程，脱离本地开发环境则无法提测
    - 目前流程下是没问题的，本来也是我们触发
  - jenkins 版本监控不到
    - 目前也没问题的，本来也不保留备份

## 后续变化

- 敏捷平台三期的一个重点功能是在平台上创建提测的时候触发构建，构建成功则提测生效
- h5 没有专门的版本管理流程，所以我认为提测和 bug，与版本不是强相关。
  - 之前敏捷平台的 jenkins 构建号填了也完全没用
- 如果强调版本控制，且能脱离开发提测，就必须依赖 jenkins 线上构建
- 如果提测与版本解耦，则测试仍能随时提测，也能收到发布通知
